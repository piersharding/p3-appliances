---

- name: Ensure required packages are installed (apt)
  apt:
    name: "{{ item }}"
    update_cache: yes
    state: installed
  with_items:
  - python-pip
  - python3-pip
  # - python-rados
  # - python3-rados

- name: set server id
  set_fact:
    this_server_id: "{{ play_hosts.index(inventory_hostname) + 1 }}"

- name: download https://artifacts.elastic.co/downloads/beats/metricbeat/metricbeat-5.3.1-amd64.deb
  get_url:
    url: https://artifacts.elastic.co/downloads/beats/metricbeat/metricbeat-5.3.1-amd64.deb
    dest: /var/tmp/metricbeat-5.3.1-amd64.deb

- name: Install /var/tmp/metricbeat-5.3.1-amd64.deb package
  apt:
    deb: /var/tmp/metricbeat-5.3.1-amd64.deb
  register: updatemetricbeat

# curl -G --data-urlencode 'match[]={job=~".+"}' http://10.111.1.11:9090/federate
# GET /federate?match[]=%7Bjob%3D~%22.%2B%22%7D HTTP/1.1

# - name: /etc/metricbeat/metricbeat.yml
#   copy:
#     content: |-
#       metricbeat.modules:
#       - module: docker
#         # metricsets: ["container", "cpu", "diskio", "healthcheck", "info", "memory", "network"]
#         metricsets: ["container", "cpu", "diskio", "info", "memory", "network"]
#         hosts: ["unix:///var/run/docker.sock"]
#         enabled: true
#         period: 10s

#       - module: system
#         metricsets:
#           # CPU stats
#           - cpu

#           # System Load stats
#           - load

#           # Per CPU core stats
#           - core

#           # IO stats
#           - diskio

#           # Per filesystem stats
#           - filesystem

#           # File system summary stats
#           - fsstat

#           # Memory stats
#           - memory

#           # Network stats
#           - network

#           # Per process stats
#           - process

#           # Sockets (linux only)
#           #- socket
#         enabled: true
#         period: 10s
#         processes: ['.*']

#       output.logstash:
#         # The Logstash hosts
#         hosts: ["{{ elastic_logstash1 }}:5044"]
#         index: metrics

#       logging.level: info

#       logging.selectors: ["*"]

#     force: yes
#     dest: /etc/metricbeat/metricbeat.yml
#   register: updatemetricbeat


# - name: ensure metricbeat restarts
#   service: name=metricbeat state=restarted enabled=yes
#   when: updatemetricbeat.changed
#   become: true

- name: install docker dependencies
  pip:
    name: docker-py

- name: nodes remove containers
  docker_container:
    name: "{{ item }}"
    state: absent
  with_items:
    - nodeexporter

- name: docker pull images
  docker_image:
    name: "{{ item.name }}"
    tag: "{{ item.tag }}"
    pull: true
    state: present
  with_items:
    - name: prom/node-exporter
      tag: latest

- name: Restart a nodeexporter
  docker_container:
    name: nodeexporter
    restart_policy: always
    image: "prom/node-exporter:latest"
    state: started
    network_mode: host
    command: --collector.textfile.directory /textfiles
    volumes:
     - "/var/lib/node_exporter/textfile_collector:/textfiles:ro"
    labels:
      org.label-schema.group: monitoring
    ports:
      - "9100:9100"



# install Prometheus

- name: prometheus remove containers
  docker_container:
    name: "{{ item }}"
    state: absent
  with_items:
    - prometheus
    - alertmanager
    - grafana

- name: Creates directory /var/lib/prometheus-data
  file: path=/var/lib/prometheus-data state=directory mode=0777

- name: Creates directory /etc/prometheus/static_configs
  file: path=/etc/prometheus/static_configs state=directory


- name: /etc/prometheus/prometheus.yml
  template: 
    src: prometheus.yml.j2
    dest: /etc/prometheus/prometheus.yml
  register: updateprometheus


- name: /etc/prometheus/containers.rules
  copy:
    content: |-
      # ALERT jenkins_down
      #   IF absent(container_memory_usage_bytes{name="jenkins"})
      #   FOR 30s
      #   LABELS { severity = "critical" }
      #   ANNOTATIONS {
      #     summary= "Jenkins down",
      #     description= "Jenkins container is down for more than 30 seconds."
      #   }

      #  ALERT jenkins_high_cpu
      #   IF sum(rate(container_cpu_usage_seconds_total{name="jenkins"}[1m])) / count(node_cpu{mode="system"}) * 100 > 10
      #   FOR 30s
      #   LABELS { severity = "warning" }
      #   ANNOTATIONS {
      #     summary= "Jenkins high CPU usage",
      #     description= "Jenkins CPU usage is {{ '{{' }} humanize $value{{ '}}' }}%."
      #   }

      # ALERT jenkins_high_memory
      #   IF sum(container_memory_usage_bytes{name="jenkins"}) > 1200000000
      #   FOR 30s
      #   LABELS { severity = "warning" }
      #   ANNOTATIONS {
      #       summary = "Jenkins high memory usage",
      #       description = "Jenkins memory consumption is at {{ '{{' }} humanize $value{{ '}}' }}.",
      # }
    force: yes
    dest: /etc/prometheus/containers.rules
  register: updateprometheus

- name: /etc/prometheus/host.rules
  copy:
    content: |-
      # ALERT high_cpu_load
      #   IF node_load1 > 1.5
      #   FOR 30s
      #   LABELS { severity = "warning" }
      #   ANNOTATIONS {
      #       summary = "Server under high load",
      #       description = "Docker host is under high load, the avg load 1m is at {{ '{{' }} $value{{ '}}' }}. Reported by instance {{ '{{' }} $labels.instance {{ '}}' }} of job {{ '{{' }} $labels.job {{ '}}' }}.",
      #   }

      # ALERT high_memory_load
      #   IF (sum(node_memory_MemTotal) - sum(node_memory_MemFree + node_memory_Buffers + node_memory_Cached) ) / sum(node_memory_MemTotal) * 100 > 85
      #   FOR 30s
      #   LABELS { severity = "warning" }
      #   ANNOTATIONS {
      #       summary = "Server memory is almost full",
      #       description = "Docker host memory usage is {{ '{{' }} humanize $value{{ '}}' }}%. Reported by instance {{ '{{' }} $labels.instance {{ '}}' }} of job {{ '{{' }} $labels.job {{ '}}' }}.",
      #   }

      # ALERT hight_storage_load
      #   IF (node_filesystem_size{fstype="aufs"} - node_filesystem_free{fstype="aufs"}) / node_filesystem_size{fstype="aufs"}  * 100 > 85
      #   FOR 30s
      #   LABELS { severity = "warning" }
      #   ANNOTATIONS {
      #       summary = "Server storage is almost full",
      #       description = "Docker host storage usage is {{ '{{' }} humanize $value{{ '}}' }}%. Reported by instance {{ '{{' }} $labels.instance {{ '}}' }} of job {{ '{{' }} $labels.job {{ '}}' }}.",
      # }
    force: yes
    dest: /etc/prometheus/host.rules
  register: updateprometheus

- name: /etc/prometheus/targets.rules
  copy:
    content: |-
      # ALERT monitor_service_down
      #   IF up == 0
      #   FOR 30s
      #   LABELS { severity = "critical" }
      #   ANNOTATIONS {
      #       summary = "Monitor service non-operational",
      #       description = "Service {{ '{{' }} $labels.instance {{ '}}' }} is down.",
      #   }
    force: yes
    dest: /etc/prometheus/targets.rules
  register: updateprometheus

- name: Update node_export config
  blockinfile: dest=/etc/prometheus/static_configs/nodeexporter.yaml block="{{ lookup('file', './prometheus_nodeexporter.yaml') }}"
              state=present create=yes
  register: updateconfig
  become: true

- name: Update cadvisor config
  blockinfile: dest=/etc/prometheus/static_configs/cadvisor.yaml block="{{ lookup('file', './prometheus_cadvisor.yaml') }}"
              state=present create=yes
  register: updateconfig
  become: true

- name: Update docker config
  blockinfile: dest=/etc/prometheus/static_configs/docker.yaml block="{{ lookup('file', './prometheus_docker.yaml') }}"
              state=present create=yes
  register: updateconfig
  become: true

- name: Update process config
  blockinfile: dest=/etc/prometheus/static_configs/process.yaml block="{{ lookup('file', './prometheus_process.yaml') }}"
              state=present create=yes
  register: updateconfig
  become: true

# - name: ensure Prometheus restarts
#   shell: /usr/bin/docker restart prometheus
#   when: updateconfig.changed
#   become: true

- name: Creates directory /var/lib/prometheus-data/prometheus
  file: path=/var/lib/prometheus-data/prometheus state=directory mode=0777

- name: docker pull images
  docker_image:
    state: present
    pull: true
    name: "{{ item }}"
  with_items:
    - prom/prometheus:latest
    - prom/alertmanager:latest
    - grafana/grafana:latest

- name: Restart a Prometheus
  docker_container:
    name: prometheus
    restart_policy: always
    image: prom/prometheus:latest
    # command: "--config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus-data --alertmanager.url=http://alertmanager-url:9093 --storage.local.memory-chunks=10000000"
    command: "--config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus-data --web.listen-address=0.0.0.0:9090 "
    state: started
    labels:
      org.label-schema.group: monitoring
    volumes:
     - "/var/lib/prometheus-data/prometheus:/prometheus-data"
     - "/etc/prometheus:/etc/prometheus"
    ports:
    - "9090:9090"

- name: Creates directory /var/lib/prometheus-data/grafana
  file: path=/var/lib/prometheus-data/grafana state=directory

- name: Restart a Grafana
  docker_container:
    name: grafana
    restart_policy: always
    image: grafana/grafana:latest
    state: started
    labels:
      org.label-schema.group: monitoring
    volumes:
     - "/var/lib/prometheus-data/grafana:/var/lib/grafana"
    ports:
    - "3000:3000"
    env:
        GF_SECURITY_ADMIN_USER: admin
        GF_SECURITY_ADMIN_PASSWORD: changeme
        GF_USERS_ALLOW_SIGN_UP: "false"


- name: /home/ubuntu/swift.conf
  copy:
    content: |-
      [bench]
      auth = http://{{ hostvars["shared_services-controller-0"].ansible_host }}:8080/auth/v1.0
      user = benchmark:swift
      key = guessme
      auth_version = 1.0
    force: yes
    dest: /home/ubuntu/swift.conf
    owner: ubuntu
    group: ubuntu
    mode: 0644


- name: /home/ubuntu/pgs.sh
  copy:
    content: |-
      #!/bin/sh

      ceph pg dump | awk '
      BEGIN { IGNORECASE = 1 }
       /^PG_STAT/ { col=1; while($col!="UP") {col++}; col++ }
       /^[0-9a-f]+\.[0-9a-f]+/ { match($0,/^[0-9a-f]+/); pool=substr($0, RSTART, RLENGTH); poollist[pool]=0;
       up=$col; i=0; RSTART=0; RLENGTH=0; delete osds; while(match(up,/[0-9]+/)>0) { osds[++i]=substr(up,RSTART,RLENGTH); up = substr(up, RSTART+RLENGTH) }
       for(i in osds) {array[osds[i],pool]++; osdlist[osds[i]];}
      }
      END {
       printf("\n");
       printf("pool :\t"); for (i in poollist) printf("%s\t",i); printf("| SUM \n");
       for (i in poollist) printf("--------"); printf("----------------\n");
       for (i in osdlist) { printf("osd.%i\t", i); sum=0;
         for (j in poollist) { printf("%i\t", array[i,j]); sum+=array[i,j]; sumpool[j]+=array[i,j] }; printf("| %i\n",sum) }
       for (i in poollist) printf("--------"); printf("----------------\n");
       printf("SUM :\t"); for (i in poollist) printf("%s\t",sumpool[i]); printf("|\n");
      }'
    force: yes
    dest: /home/ubuntu/pgs.sh
    owner: ubuntu
    group: ubuntu
    mode: 0755


- name: /home/ubuntu/default.conf
  copy:
    content: |-
      server {
          listen       80;
          server_name  localhost;

          location / {
              root   /usr/share/nginx/html;
              autoindex on;
              #index  index.html index.htm;
          }

          error_page   500 502 503 504  /50x.html;
          location = /50x.html {
              root   /usr/share/nginx/html;
          }
      }
    force: yes
    dest: /home/ubuntu/default.conf
    owner: ubuntu
    group: ubuntu
    mode: 0644

- name: /home/ubuntu/rados_client.py
  copy:
    src: ../../../../../rados_client.py
    force: yes
    dest: /home/ubuntu/rados_client.py
    owner: ubuntu
    group: ubuntu
    mode: 0755


- name: clone ceph repo
  git:
    repo: 'git://github.com/piersharding/ceph'
    dest: /home/ubuntu/ceph
    version: luminous
  become_user: ubuntu

- name: Create build script /home/ubuntu/build_ceph.sh
  copy:
    content: |-
      #!/bin/bash -x
      set -e
      cd /home/ubuntu/ceph
      git submodule update --init --recursive
      cd /home/ubuntu/ceph
      #export DEBIAN_FRONTEND="noninteractive"
      ./install-deps.sh
      cd /home/ubuntu/ceph
      ./make-debs.sh /var/tmp/release {{ local_repo_signing_key }}
      cd /var/tmp/release/Ubuntu
      sh ./load_repo.sh
      
      exit 0

    force: yes
    dest: /home/ubuntu/build_ceph.sh
    owner: ubuntu
    group: ubuntu
    mode: 0755

- name: checkout submodules
  shell: cd /home/ubuntu/ceph && git submodule update --init --recursive
  chdir: /home/ubuntu/ceph
  become: false

- name: install ceph dependencies
  shell: |
    cd /home/ubuntu/ceph
    #export DEBIAN_FRONTEND="noninteractive"
    /home/ubuntu/ceph/install-deps.sh
    exit 0
  args:
    executable: /bin/bash
  chdir: /home/ubuntu/ceph
  become: false

- name: make debian packages
  shell: "cd /home/ubuntu/ceph && /home/ubuntu/ceph/make-debs.sh /var/tmp/release {{ local_repo_signing_key }}"
  chdir: /home/ubuntu/ceph
  become: false
