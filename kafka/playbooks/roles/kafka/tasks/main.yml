---

- name: Ensure required kafka packages are installed (apt)
  apt:
    name: "{{ item }}"
    update_cache: yes
    state: installed
  with_items:
  - python-pip
  - python3-pip

- name: Add group "kafka"
  group: name={{ kafka_group }} system=yes

- name: Add user "kafka"
  user: name={{ kafka_group }} group={{ kafka_group }} shell=/sbin/nologin system=yes

- name: Download the tarball
  get_url: url="http://{{ apache_mirror }}/kafka/{{ kafka_version }}/kafka_{{ scala_version }}-{{ kafka_version }}.tgz" dest=/opt/kafka_{{ scala_version }}-{{ kafka_version }}.tgz

- name: Extract the tarball
  unarchive: src=/opt/kafka_{{ scala_version }}-{{ kafka_version }}.tgz dest=/opt/ copy=no creates=/opt/kafka_{{ scala_version }}-{{ kafka_version }}

- name: Symlink install directory
  file: src=/opt/kafka_{{ scala_version }}-{{ kafka_version }} path=/opt/kafka state=link

# https://www.robustperception.io/monitoring-kafka-with-prometheus/

- name: Download JMX Agent
  get_url: url="https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.9/jmx_prometheus_javaagent-0.9.jar" dest=/opt/kafka/libs/jmx_prometheus_javaagent.jar

- name: Download JMX Agent Config
  get_url: url="https://raw.githubusercontent.com/prometheus/jmx_exporter/master/example_configs/kafka-0-8-2.yml" dest=/opt/kafka/config/kafka-0-8-2.yml

- name: Set permissions to Kafka folder
  file: path=/opt/kafka/ owner=root group=root recurse=yes

- name: Create /var/lib/kafka-data directory
  file: path="{{ kafka_data_dir }}" state=directory owner={{ kafka_user }} group={{ kafka_group }}
  when: data_disks_devices is not defined or not data_disks_devices or data_disks_devices|length <= 0

# - name: Create /disk/{0..n}/kafka/data directories
#   file: path="/disk/{{ item.0 + 1 }}/kafka/data" state=directory owner={{ kafka_user }} group={{ kafka_group }}
#   with_indexed_items: "{{ data_disks_devices }}"
#   when: data_disks_devices is defined and data_disks_devices

- name: Create Kafka log directory
  file: path={{ kafka_log_dir }} state=directory owner={{ kafka_user }} group={{ kafka_group }}

- name: Link the log directory
  file: src={{ kafka_log_dir }} path=/opt/kafka/logs state=link

- name: Create Kafka conf directory
  file: path={{ kafka_conf_dir }} state=directory owner=root group=root mode=755

- name: Install Kafka init script
  template: src=kafka-server.j2 dest=/etc/init.d/kafka-server mode=0755
  notify: Reload systemd

# - name: Fixup Kafka startup script
#   lineinfile:
#     line: "export KAFKA_HEAP_OPTS=\"-Xmx8G -Xms8G\"\nexport KAFKA_OPTS=\"$KAFKA_OPTS -javaagent:${KAFKA_HOME}/libs/jmx_prometheus_javaagent.jar=7071:${KAFKA_HOME}/config/kafka-0-8-2.yml\""
#     insertafter: '^EXTRA_ARGS='
#     dest: /opt/kafka/bin/kafka-server-start.sh


- name: Fixup Kafka startup script
  blockinfile:
    dest: "/opt/kafka/bin/kafka-server-start.sh"
    insertafter: '^EXTRA_ARGS='
    block: |
      export KAFKA_HEAP_OPTS="-Xmx16G -Xms16G"
      export KAFKA_OPTS="$KAFKA_OPTS -javaagent:${KAFKA_HOME}/libs/jmx_prometheus_javaagent.jar=7071:${KAFKA_HOME}/config/kafka-0-8-2.yml"

    marker: "# {mark} ANSIBLE MANAGED BLOCK for Prometheus metrics and Memory"


- meta: flush_handlers

- name: set server id
  set_fact:
    this_server_id: "{{ play_hosts.index(inventory_hostname) + 1 }}"

- name: Configure Kafka server
  template: src=server.properties.j2 dest="{{kafka_conf_dir}}/server.properties"
  notify: Restart kafka

- name: Upload log4j configs
  copy: src={{ item }} dest="{{ kafka_conf_dir }}/" owner=root group=root mode=644
  with_items:
    - log4j.properties
    - tools-log4j.properties
  notify: Restart kafka

- name: Add Kafka binaries to PATH
  copy: src=kafka.sh dest=/etc/profile.d/ owner=root group=root mode=644
  notify: Restart kafka

- meta: flush_handlers

- name: Make sure Kafka is running
  service: name=kafka-server enabled=yes state=started

- name: Create Apache Kafka input topic.
  shell: /opt/kafka/bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 2 --partitions 5 --topic {{ item }}
  ignore_errors: true
  with_items:
    - collectd
    - metricsets
    - rsyslog
    - parse-err

- name: download https://artifacts.elastic.co/downloads/beats/metricbeat/metricbeat-5.3.1-amd64.deb
  get_url:
    url: https://artifacts.elastic.co/downloads/beats/metricbeat/metricbeat-5.3.1-amd64.deb
    dest: /var/tmp/metricbeat-5.3.1-amd64.deb

- name: Install /var/tmp/metricbeat-5.3.1-amd64.deb package
  apt:
    deb: /var/tmp/metricbeat-5.3.1-amd64.deb
  register: updatemetricbeat

# curl -G --data-urlencode 'match[]={job=~".+"}' http://10.111.1.11:9090/federate
# GET /federate?match[]=%7Bjob%3D~%22.%2B%22%7D HTTP/1.1

# - name: /etc/metricbeat/metricbeat.yml
#   copy:
#     content: |-
#       metricbeat.modules:
#       - module: docker
#         # metricsets: ["container", "cpu", "diskio", "healthcheck", "info", "memory", "network"]
#         metricsets: ["container", "cpu", "diskio", "info", "memory", "network"]
#         hosts: ["unix:///var/run/docker.sock"]
#         enabled: true
#         period: 10s

#       - module: system
#         metricsets:
#           # CPU stats
#           - cpu
        
#           # System Load stats
#           - load
        
#           # Per CPU core stats
#           - core
       
#           # IO stats
#           - diskio

#           # Per filesystem stats
#           - filesystem

#           # File system summary stats
#           - fsstat

#           # Memory stats
#           - memory

#           # Network stats
#           - network

#           # Per process stats
#           - process

#           # Sockets (linux only)
#           #- socket
#         enabled: true
#         period: 10s
#         processes: ['.*']

#       output.logstash:
#         # The Logstash hosts
#         hosts: ["{{ elastic_logstash1 }}:5044"]
#         index: metrics

#       logging.level: info

#       logging.selectors: ["*"]

#     force: yes 
#     dest: /etc/metricbeat/metricbeat.yml
#   register: updatemetricbeat

# - name: ensure metricbeat restarts
#   service: name=metricbeat state=restarted enabled=yes
#   when: updatemetricbeat.changed
#   become: true



- name: install docker dependencies
  pip:
    name: docker-py

- name: nodes remove containers
  docker_container:
    name: "{{ item }}"
    state: absent
  with_items:
    - nodeexporter

- name: docker pull images
  docker_image:
    name: "{{ item.name }}"
    tag: "{{ item.tag }}"
    pull: true
    state: present
  with_items:
    - name: prom/node-exporter
      tag: latest

- name: Restart a nodeexporter
  docker_container:
    name: nodeexporter
    restart_policy: always
    image: "prom/node-exporter:latest"
    state: started
    network_mode: host
    command: --collector.textfile.directory /textfiles
    volumes:
     - "/var/lib/node_exporter/textfile_collector:/textfiles:ro"
    labels:
      org.label-schema.group: monitoring
    ports:
      - "9100:9100"
