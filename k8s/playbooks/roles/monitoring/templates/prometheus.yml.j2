global:
  scrape_interval:     5s
  evaluation_interval: 5s

# Attach these labels to any time series or alerts when communicating with
# external systems (federation, remote storage, Alertmanager).
  external_labels:
    monitor: 'docker-master'

# Load and evaluate rules in this file every 'evaluation_interval' seconds.
rule_files:
- "targets.rules"
- "host.rules"
- "containers.rules"

# A scrape configuration containing exactly one endpoint to scrape.
scrape_configs:
  # - job_name: 'qpid'
  #   static_configs:
  #    - targets:
  #      - 10.101.1.188:9100
  #      - 10.101.1.189:9100
  #      - 10.101.1.190:9100
  - job_name: 'nodeexporter'
    static_configs:
     - targets:
{% for item in groups["cluster"] %}
       - {{ hostvars[item].ansible_host }}:9100
{% endfor %}
    metric_relabel_configs:
    - source_labels: [instance]
      regex: '^([0-9\.]+):[0-9]+'
      replacement: '$1'
      target_label: instance
{% for item in groups["cluster"] %}
    - source_labels: [instance]
      regex: '({{ hostvars[item]['secondary_ip'] if ('secondary_ip' in hostvars[item]) else hostvars[item]['ansible_default_ipv4']['address'] }})'
      replacement: '{{ item }}'
      target_label: instance
{% endfor %}
    - source_labels: [instance]
      regex: '^([0-9\.]+):[0-9]+'
      replacement: '$1'
      target_label: instance
{% for item in groups["cluster"] %}
    - source_labels: [instance]
      regex: '({{ hostvars[item]['ansible_default_ipv4']['address'] }})'
      replacement: '{{ item }}'
      target_label: instance
{% endfor %}

  - job_name: 'dockermetrics'
    static_configs:
     - targets:
{% for item in groups["cluster"] %}
       - {{ hostvars[item].ansible_host }}:9323
{% endfor %}
    metric_relabel_configs:
    - source_labels: [instance]
      regex: '^([0-9\.]+):[0-9]+'
      replacement: '$1'
      target_label: instance
{% for item in groups["cluster"] %}
    - source_labels: [instance]
      regex: '({{ hostvars[item]['secondary_ip'] if ('secondary_ip' in hostvars[item]) else hostvars[item]['ansible_default_ipv4']['address'] }})'
      replacement: '{{ item }}'
      target_label: instance
{% endfor %}
    - source_labels: [instance]
      regex: '^([0-9\.]+):[0-9]+'
      replacement: '$1'
      target_label: instance
{% for item in groups["cluster"] %}
    - source_labels: [instance]
      regex: '({{ hostvars[item]['ansible_default_ipv4']['address'] }})'
      replacement: '{{ item }}'
      target_label: instance
{% endfor %}

  - job_name: 'cadvisor'
    static_configs:
     - targets:
{% for item in groups["cluster"] %}
       - {{ hostvars[item].ansible_host }}:8081
{% endfor %}
    metric_relabel_configs:
    - source_labels: [instance]
      regex: '^([0-9\.]+):[0-9]+'
      replacement: '$1'
      target_label: instance
{% for item in groups["cluster"] %}
    - source_labels: [instance]
      regex: '({{ hostvars[item]['secondary_ip'] if ('secondary_ip' in hostvars[item]) else hostvars[item]['ansible_default_ipv4']['address'] }})'
      replacement: '{{ item }}'
      target_label: instance
{% endfor %}
    - source_labels: [instance]
      regex: '^([0-9\.]+):[0-9]+'
      replacement: '$1'
      target_label: instance
{% for item in groups["cluster"] %}
    - source_labels: [instance]
      regex: '({{ hostvars[item]['ansible_default_ipv4']['address'] }})'
      replacement: '{{ item }}'
      target_label: instance
{% endfor %}

  - job_name: 'pexporter'
    static_configs:
     - targets:
{% for item in groups["cluster"] %}
       - {{ hostvars[item].ansible_host }}:9256
{% endfor %}
    metric_relabel_configs:
    - source_labels: [instance]
      regex: '^([0-9\.]+):[0-9]+'
      replacement: '$1'
      target_label: instance
{% for item in groups["cluster"] %}
    - source_labels: [instance]
      regex: '({{ hostvars[item]['secondary_ip'] if ('secondary_ip' in hostvars[item]) else hostvars[item]['ansible_default_ipv4']['address'] }})'
      replacement: '{{ item }}'
      target_label: instance
{% endfor %}
    - source_labels: [instance]
      regex: '^([0-9\.]+):[0-9]+'
      replacement: '$1'
      target_label: instance
{% for item in groups["cluster"] %}
    - source_labels: [instance]
      regex: '({{ hostvars[item]['ansible_default_ipv4']['address'] }})'
      replacement: '{{ item }}'
      target_label: instance
{% endfor %}

