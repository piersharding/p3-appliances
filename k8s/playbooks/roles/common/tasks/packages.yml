- name: add go repo
  apt_repository:
    repo: ppa:longsleep/golang-backports

- name: Ensure required packages are installed (apt)
  apt:
    name: "{{ item }}"
    update_cache: yes
    state: installed
  with_items: "{{ packages|default([]) }}"

# - name: Upgrade all packages (apt)
#   apt: upgrade=dist

- name: Make sure the NTP service is stopped
  service: name={{ ntp_service }} state=stopped

- name: Force NTP sync
  command: "{{ ntp_sync }}"

- name: Start the NTP service
  service: name={{ ntp_service }} state=started enabled=yes
    
- name: Add the dm_thin_pool module
  modprobe:
    name: dm_thin_pool
    state: present

- name: Enable iscsi initiator
  lineinfile:
    regexp: '^node.startup ='
    line: 'node.startup = automatic'
    path: /etc/iscsi/iscsid.conf

- name: ensure iscsid restarts
  service: name=iscsid state=restarted enabled=yes
  become: true

- name: Set nofile limits
  lineinfile: dest=/etc/security/limits.conf
              insertbefore="^# End of file"
              state=present
              line="{{ item }}"
  with_items:
    - "* soft nofile 32768"
    - "* hard nofile 32768"

- name: Set nproc limits
  lineinfile: dest=/etc/security/limits.d/90-nproc.conf
              insertafter=EOF
              state=present
              create=yes
              line="{{ item }}"
              mode=0644
  with_items:
    - "* soft nproc 32768"
    - "* hard nproc 32768"

- name: Set swappiness to 1
  sysctl: name=vm.swappiness value=1 state=present ignoreerrors=yes

# - name: Get number of kernels in grub.conf
#   shell: grep -E "^[[:blank:]]*kernel" /boot/grub/grub.conf | grep -v transparent_hugepage
#   register: grep_result
#   when: ansible_os_family == "RedHat" and (ansible_distribution == "Amazon" or ansible_distribution_major_version == "6")
#   ignore_errors: true

# - name: Disable Transparent Huge Pages in Grub 1
#   lineinfile: dest=/boot/grub/grub.conf
#               backrefs=True
#               state=present
#               regexp='(^\s*kernel(\s+(?!transparent_hugepage=never)[\w=/\-\.\,]+)*)\s*$'
#               line='\1 transparent_hugepage=never'
#   with_items: "{{ grep_result.stdout_lines | default('') }}"
#   when: ansible_os_family == "RedHat" and (ansible_distribution == "Amazon" or ansible_distribution_major_version == "6")

- name: Disable Transparent Huge Pages in Grub 2
  lineinfile: dest=/etc/default/grub
              state=present
              line='GRUB_CMDLINE_LINUX="$GRUB_CMDLINE_LINUX transparent_hugepage=never numa=off"'
              # line='GRUB_CMDLINE_LINUX=$GRUB_CMDLINE_LINUX" transparent_hugepage=never intel_iommu=on iommu=pt"'
  when: ansible_distribution_major_version|int > 6
  notify: Run update-grub

- meta: flush_handlers

- name: Disable Transparent Huge Pages until reboot
  shell: echo never > /sys/kernel/mm/transparent_hugepage/enabled && echo never > /sys/kernel/mm/transparent_hugepage/defrag
  ignore_errors: true

# Ensure a locale exists.
- locale_gen:
    name: "{{ item }}"
    state: present
  with_items:
  - en_US.UTF-8
  - en_NZ.UTF-8

# - name: Add apt key for local repository
#   apt_key:
#     keyserver: keyserver.ubuntu.com
#     id: "{{ local_repo_signing_key }}"

# DNS must resolve from hosts first
# - name: Configure dnsmasq
#   lineinfile:
#     path: /etc/dnsmasq.conf
#     line: "{{ item }}"
#     regexp: "^{{ item }}$"
#     create: no
#     state: present
#   with_items:
#     - "interface=lo"
#     - "listen-address=127.0.0.1"
#     - "bind-interfaces"
#   notify: restart dnsmasq

- name: Load Infiniband kernel drivers
  modprobe:
    name: "{{ item }}"
    state: present
  with_items:
    - mlx5_core
    - mlx5_ib
    - ib_core
    - ib_uverbs
    - ib_ipoib
    - rdma_cm
    - rdma_ucm

- name: Bring up the Infiniband interfaces
  command: ifconfig ib0 up

- name: activate p3p1 interface
  copy: content="auto p3p1\niface p3p1 inet static\n    address {{ secondary_ip }}\n    netmask 255.255.255.0\n    broadcast 10.1.0.255\n    gateway 10.60.210.1" force=yes dest=/etc/network/interfaces.d/p3p1.cfg

# - name: activate ib0 interface
#   copy: content="auto ib0\niface ib0 inet static\n    address {{ ib_ip }}\n    netmask 255.255.255.0\n    broadcast 10.1.99.255\n    gateway 10.60.210.1" force=yes dest=/etc/network/interfaces.d/ib0.cfg


- name: activate ib0 interface
  blockinfile:
    dest: "/etc/rc.local"
    insertbefore: "exit 0"
    block: |
      for i in mlx5_core mlx5_ib ib_core ib_uverbs ib_ipoib rdma_cm rdma_ucm; do modprobe $i; done
      ifconfig ib0 up
      ifconfig ib0 {{ ib_ip }} netmask 255.255.255.0
    marker: "# {mark} ANSIBLE MANAGED BLOCK for ib0"


# for i in mlx5_core mlx5_ib ib_core ib_uverbs ib_ipoib rdma_cm rdma_ucm; do modprobe $i; done
# ifconfig ib0 up
# ifconfig ib0 10.1.99.10 netmask 255.255.255.0


# "auto p3p1\niface p3p1 inet dhcp\n    gateway 10.60.210.1"
# auto eth0
# iface eth0 inet static
#     address 10.0.0.41
#     netmask 255.255.255.0
#     network 10.0.0.0
#     broadcast 10.0.0.255
#     gateway 10.0.0.1

# - name: Create interface using aggregate
#   net_interface:
#     name: p3p1
#     speed: 25g
#     duplex: full
#     mtu: 9000
#     enabled: True
#     state: up

- meta: flush_handlers

