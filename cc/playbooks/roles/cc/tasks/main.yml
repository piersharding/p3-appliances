---

- name: Ensure required docker packages are installed (apt)
  apt:
    name: "{{ item }}"
    update_cache: yes
    state: installed
  with_items:
  - python-pip
  - python3-pip


- name: Add cc apt key
  apt_key:
    url: http://download.opensuse.org/repositories/home:/clearcontainers:/clear-containers-3/xUbuntu_16.04/Release.key
    state: present

- name: Add cc apt source
  lineinfile:
    line: 'deb http://download.opensuse.org/repositories/home:/clearcontainers:/clear-containers-3/xUbuntu_16.04/ /'
    dest: /etc/apt/sources.list.d/cc.list
    create: yes
    owner: root
    group: root
    mode: 0644


- name: Set the host grouping
  set_fact:
    host_grouping: "{% if inventory_hostname != groups['master'][0] %}master{% else %}worker{% endif %}"

- name: Create /etc/systemd/system/docker.service.d
  file:
    path: "/etc/systemd/system/docker.service.d"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Upload cc-runtime.sh
  copy: src=cc-runtime.sh dest="/usr/bin/cc-runtime.sh" owner=root group=root mode=755

- name: Configure docker server
  template: src=docker.conf.j2 dest="/etc/systemd/system/docker.service.d/docker.conf"
  notify:
    - Reload systemd
    - Restart docker

# https://github.com/clearcontainers/runtime/blob/master/docs/ubuntu-installation-guide.md

- name: Ensure required cc packages are installed (apt)
  apt:
    name: "{{ item }}"
    update_cache: yes
    state: installed
  with_items:
  - cc-runtime
  - cc-proxy
  - cc-shim
  notify:
    - Reload systemd
    - Restart cc proxy


- meta: flush_handlers

- name: download https://artifacts.elastic.co/downloads/beats/metricbeat/metricbeat-5.3.1-amd64.deb
  get_url:
    url: https://artifacts.elastic.co/downloads/beats/metricbeat/metricbeat-5.3.1-amd64.deb
    dest: /var/tmp/metricbeat-5.3.1-amd64.deb

- name: Install /var/tmp/metricbeat-5.3.1-amd64.deb package
  apt:
    deb: /var/tmp/metricbeat-5.3.1-amd64.deb
  register: updatemetricbeat

# curl -G --data-urlencode 'match[]={job=~".+"}' http://10.111.1.11:9090/federate
# GET /federate?match[]=%7Bjob%3D~%22.%2B%22%7D HTTP/1.1

# - name: /etc/metricbeat/metricbeat.yml
#   copy:
#     content: |-
#       metricbeat.modules:
#       - module: docker
#         # metricsets: ["container", "cpu", "diskio", "healthcheck", "info", "memory", "network"]
#         metricsets: ["container", "cpu", "diskio", "info", "memory", "network"]
#         hosts: ["unix:///var/run/docker.sock"]
#         enabled: true
#         period: 10s

#       - module: system
#         metricsets:
#           # CPU stats
#           - cpu

#           # System Load stats
#           - load

#           # Per CPU core stats
#           - core

#           # IO stats
#           - diskio

#           # Per filesystem stats
#           - filesystem

#           # File system summary stats
#           - fsstat

#           # Memory stats
#           - memory

#           # Network stats
#           - network

#           # Per process stats
#           - process

#           # Sockets (linux only)
#           #- socket
#         enabled: true
#         period: 10s
#         processes: ['.*']

#       output.logstash:
#         # The Logstash hosts
#         hosts: ["{{ elastic_logstash1 }}:5044"]
#         index: metrics

#       logging.level: info

#       logging.selectors: ["*"]

#     force: yes
#     dest: /etc/metricbeat/metricbeat.yml
#   register: updatemetricbeat

# - name: ensure metricbeat restarts
#   service: name=metricbeat state=restarted enabled=yes
#   when: updatemetricbeat.changed
#   become: true



- name: install docker dependencies
  pip:
    name: docker-py

- name: nodes remove containers
  docker_container:
    name: "{{ item }}"
    state: absent
  with_items:
    - nodeexporter

- name: docker pull images
  docker_image:
    name: "{{ item.name }}"
    tag: "{{ item.tag }}"
    pull: true
    state: present
  with_items:
    - name: prom/node-exporter
      tag: latest

- name: Restart a nodeexporter
  docker_container:
    name: nodeexporter
    restart_policy: always
    image: "prom/node-exporter:latest"
    state: started
    network_mode: host
    command: --collector.textfile.directory /textfiles
    volumes:
     - "/var/lib/node_exporter/textfile_collector:/textfiles:ro"
    labels:
      org.label-schema.group: monitoring
    ports:
      - "9100:9100"
